#import necissary libraries
import cvxpy as cp
import numpy as np

#constant
HOURS = 24
#define Variables and Parameters scalars and vectors
cost = cp.Variable(HOURS) #amount of money spent on curtailment (vector), determined by opt
curtail = cp.Variable(HOURS) #how many kWh of energy curtailed per hour (vector), det by opt
excess = cp.Variable(HOURS) #amount of energy not curtailed per hour (vector)
overload = cp.Variable(HOURS) #amount of energy necessary to curtail per hour (vector)

budget_total = cp.Parameter() #total amount of budget allowed for day (scalar)
kWh_cost = cp.Parameter() #cost of 1 kWh of energy (scalar)
energy = cp.Parameter(HOURS) #amount of energy generated by solar PV per hour (vector)
sum_cost = cp.Parameter() #running total of cost spent over day (scalar)
energy_limit = cp.Parameter() #limit on amount of energy that can be sent to grid in one hour (scalar)

#give parameters inital values
budget_total.value = 50
kWh_cost.value = 0.1
sum_cost.value = 0
energy_limit.value = 900
energy.value = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, \
                        1200, 1100, 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100])
#create constraints
constraints = [curtail >= 0, overload >= 0, excess >= 0, overload >= (energy - energy_limit), \
sum_cost <= budget_total]
#define excess energy as the amount of energy remaining over the limit after curtailment
excess = overload - curtail
curtail = energy - energy_limit
#calculate the cost of energy curtailed
cost = curtail * kWh_cost
sum_cost = sum(cost)
#get the sum of squares of excess so that all vlaues are positive in average -----?
#why would we care about if energy is below the limit?
sum_excess = cp.sum_squares(ex
#import necissary libraries
import cvxpy as cp
import numpy as np

#constant
HOURS = 24
#define Variables and Parameters scalars and vectors
cost = cp.Variable(HOURS) #amount of money spent on curtailment (vector), determined by opt
curtail = cp.Variable(HOURS) #how many kWh of energy curtailed per hour (vector), det by opt
excess = cp.Variable(HOURS) #amount of energy not curtailed per hour (vector)
overload = cp.Variable(HOURS) #amount of energy necessary to curtail per hour (vector)

budget_total = cp.Parameter() #total amount of budget allowed for day (scalar)
kWh_cost = cp.Parameter() #cost of 1 kWh of energy (scalar)
energy = cp.Parameter(HOURS) #amount of energy generated by solar PV per hour (vector)
sum_cost = cp.Parameter() #running total of cost spent over day (scalar)
energy_limit = cp.Parameter() #limit on amount of energy that can be sent to grid in one hour (scalar)

#give parameters inital values
budget_total.value = 50
kWh_cost.value = 0.1
sum_cost.value = 0
energy_limit.value = 900
energy.value = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, \
                        1200, 1100, 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100])
#create constraints
constraints = [curtail >= 0, overload >= 0, excess >= 0, overload >= (energy - energy_limit), \
sum_cost <= budget_total]
#define excess energy as the amount of energy remaining over the limit after curtailment
excess = overload - curtail
curtail = energy - energy_limit
#calculate the cost of energy curtailed
cost = curtail * kWh_cost
sum_cost = sum(cost)
#get the sum of squares of excess so that all vlaues are positive in average -----?
#why would we care about if energy is below the limit?
sum_excess = cp.sum_squares(excess)
#objective is to minimize the excess
obj = cp.Minimize(sum_excess)
#solve the problem with the given constraints and objective
prob = cp.Problem(obj, constraints)
prob.solve()
print("overload:", overload.value)
print("curtail:", curtail.value)
print("excess:", excess.value)
print("sum_excess", sum_excess.value)
print("cost:", cost.value)
print("sum_cost:", sum_cost.value)
# for variable in problem.variables():
#     print("Variable %s: value %s" % (variable.name(), variable.value))cess)
#objective is to minimize the excess
obj = cp.Minimize(sum_excess)
#solve the problem with the given constraints and objective
prob = cp.Problem(obj, constraints)
prob.solve()
print("overload:", overload.value)
print("curtail:", curtail.value)
print("excess:", excess.value)
print("sum_excess", sum_excess.value)
print("cost:", cost.value)
print("sum_cost:", sum_cost.value)
# for variable in problem.variables():
#     print("Variable %s: value %s" % (variable.name(), variable.value))
